
Advanced_timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002c4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800044c  0800044c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800044c  0800044c  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  0800044c  0800044c  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800044c  0800044c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800044c  0800044c  0000144c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000450  08000450  00001450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000454  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000d00  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000360  00000000  00000000  00002d2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a8  00000000  00000000  00003090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000006c  00000000  00000000  00003138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017fcb  00000000  00000000  000031a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000f43  00000000  00000000  0001b16f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b781  00000000  00000000  0001c0b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a7833  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000138  00000000  00000000  000a7878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000a79b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000063  00000000  00000000  000a79cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000434 	.word	0x08000434

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000434 	.word	0x08000434

080001c8 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80001d0:	4b0e      	ldr	r3, [pc, #56]	@ (800020c <DelayMs+0x44>)
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80001d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000210 <DelayMs+0x48>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a0e      	ldr	r2, [pc, #56]	@ (8000214 <DelayMs+0x4c>)
 80001dc:	fba2 2303 	umull	r2, r3, r2, r3
 80001e0:	099b      	lsrs	r3, r3, #6
 80001e2:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	68ba      	ldr	r2, [r7, #8]
 80001e8:	fb02 f303 	mul.w	r3, r2, r3
 80001ec:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80001ee:	bf00      	nop
 80001f0:	4b06      	ldr	r3, [pc, #24]	@ (800020c <DelayMs+0x44>)
 80001f2:	685a      	ldr	r2, [r3, #4]
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	1ad2      	subs	r2, r2, r3
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d3f8      	bcc.n	80001f0 <DelayMs+0x28>
}
 80001fe:	bf00      	nop
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e0001000 	.word	0xe0001000
 8000210:	20000000 	.word	0x20000000
 8000214:	10624dd3 	.word	0x10624dd3

08000218 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
	int16_t ccr;
	SystemInit();
 800021e:	f000 f885 	bl	800032c <SystemInit>

    PWM_Init();
 8000222:	f000 f829 	bl	8000278 <PWM_Init>
    while(1)
    {
    	ccr=0;
 8000226:	2300      	movs	r3, #0
 8000228:	80fb      	strh	r3, [r7, #6]
    	while(ccr<=100)
 800022a:	e00b      	b.n	8000244 <main+0x2c>
    	{
    		TIM8->CCR1 =ccr;
 800022c:	4a11      	ldr	r2, [pc, #68]	@ (8000274 <main+0x5c>)
 800022e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000232:	6353      	str	r3, [r2, #52]	@ 0x34
    		DelayMs(1000);
 8000234:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000238:	f7ff ffc6 	bl	80001c8 <DelayMs>
    		ccr+=10;
 800023c:	88fb      	ldrh	r3, [r7, #6]
 800023e:	330a      	adds	r3, #10
 8000240:	b29b      	uxth	r3, r3
 8000242:	80fb      	strh	r3, [r7, #6]
    	while(ccr<=100)
 8000244:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000248:	2b64      	cmp	r3, #100	@ 0x64
 800024a:	ddef      	ble.n	800022c <main+0x14>
    	}
    	ccr=100;
 800024c:	2364      	movs	r3, #100	@ 0x64
 800024e:	80fb      	strh	r3, [r7, #6]
    	while(ccr>=0)
 8000250:	e00b      	b.n	800026a <main+0x52>
    		{
    		   TIM8->CCR1=ccr;
 8000252:	4a08      	ldr	r2, [pc, #32]	@ (8000274 <main+0x5c>)
 8000254:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000258:	6353      	str	r3, [r2, #52]	@ 0x34
    		   DelayMs(1000);
 800025a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800025e:	f7ff ffb3 	bl	80001c8 <DelayMs>
    		   ccr-=10;
 8000262:	88fb      	ldrh	r3, [r7, #6]
 8000264:	3b0a      	subs	r3, #10
 8000266:	b29b      	uxth	r3, r3
 8000268:	80fb      	strh	r3, [r7, #6]
    	while(ccr>=0)
 800026a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800026e:	2b00      	cmp	r3, #0
 8000270:	daef      	bge.n	8000252 <main+0x3a>
    	ccr=0;
 8000272:	e7d8      	b.n	8000226 <main+0xe>
 8000274:	40010400 	.word	0x40010400

08000278 <PWM_Init>:
 *  Created on: Oct 1, 2024
 *      Author: manish
 */
#include "timer.h"
void PWM_Init(void)
{
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 800027c:	4b28      	ldr	r3, [pc, #160]	@ (8000320 <PWM_Init+0xa8>)
 800027e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000280:	4a27      	ldr	r2, [pc, #156]	@ (8000320 <PWM_Init+0xa8>)
 8000282:	f043 0304 	orr.w	r3, r3, #4
 8000286:	6313      	str	r3, [r2, #48]	@ 0x30
GPIOC->MODER |= BV(6*2+1);
 8000288:	4b26      	ldr	r3, [pc, #152]	@ (8000324 <PWM_Init+0xac>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a25      	ldr	r2, [pc, #148]	@ (8000324 <PWM_Init+0xac>)
 800028e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000292:	6013      	str	r3, [r2, #0]
GPIOC->MODER &= ~BV(6*2);
 8000294:	4b23      	ldr	r3, [pc, #140]	@ (8000324 <PWM_Init+0xac>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a22      	ldr	r2, [pc, #136]	@ (8000324 <PWM_Init+0xac>)
 800029a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800029e:	6013      	str	r3, [r2, #0]
GPIOC->AFR[0] |= BV(24) |BV(25);
 80002a0:	4b20      	ldr	r3, [pc, #128]	@ (8000324 <PWM_Init+0xac>)
 80002a2:	6a1b      	ldr	r3, [r3, #32]
 80002a4:	4a1f      	ldr	r2, [pc, #124]	@ (8000324 <PWM_Init+0xac>)
 80002a6:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 80002aa:	6213      	str	r3, [r2, #32]

//1. Setup PWM clock (10 KHz to 100 KHz). Program the period (ARR) and the duty cycle (CCR) respectively in ARR and CCRx registers.
RCC->AHB2ENR |= RCC_APB2ENR_TIM8EN;
 80002ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000320 <PWM_Init+0xa8>)
 80002ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80002b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000320 <PWM_Init+0xa8>)
 80002b2:	f043 0302 	orr.w	r3, r3, #2
 80002b6:	6353      	str	r3, [r2, #52]	@ 0x34
//PCLK = 16MHz, PSC = 16 --> TCLK = 1MHz
TIM8->ARR =ARR_Val;
 80002b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000328 <PWM_Init+0xb0>)
 80002ba:	2264      	movs	r2, #100	@ 0x64
 80002bc:	62da      	str	r2, [r3, #44]	@ 0x2c

//ARR = 100 => PWM output freq = TCLK / ARR = 1 MHz / 100 = 10 KHz

//CCR = 50 => 50% Duty Cycle
TIM8->CCR1 =10;
 80002be:	4b1a      	ldr	r3, [pc, #104]	@ (8000328 <PWM_Init+0xb0>)
 80002c0:	220a      	movs	r2, #10
 80002c2:	635a      	str	r2, [r3, #52]	@ 0x34
//2. Configure the output pin:
//Select the output mode by writing CCS bits (00 = output) in CCMRx register.
//Select the polarity by writing the CCxP bit (0 = active high) in CCER register.
//3. Select the PWM mode (PWM1 or PWM2) by writing OCxM bits in CCMRx register.
TIM8->CCMR1 |=TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 80002c4:	4b18      	ldr	r3, [pc, #96]	@ (8000328 <PWM_Init+0xb0>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	4a17      	ldr	r2, [pc, #92]	@ (8000328 <PWM_Init+0xb0>)
 80002ca:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80002ce:	6193      	str	r3, [r2, #24]
//The PWM mode can be selected independently on each channel (one PWM per OCx output) by writing 110 (PWM mode 1) or 111 (PWM mode 2) in

//the TIMx_CCMRx register.

//4. Set the preload bit in CCMRx register and the ARPE bit in the CR1 register.//5. Select the counting mode in CR1:
TIM8->CCMR1 |=TIM_CCMR1_OC1PE;
 80002d0:	4b15      	ldr	r3, [pc, #84]	@ (8000328 <PWM_Init+0xb0>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	4a14      	ldr	r2, [pc, #80]	@ (8000328 <PWM_Init+0xb0>)
 80002d6:	f043 0308 	orr.w	r3, r3, #8
 80002da:	6193      	str	r3, [r2, #24]
TIM8->CR1 |= TIM_CR1_ARPE;
 80002dc:	4b12      	ldr	r3, [pc, #72]	@ (8000328 <PWM_Init+0xb0>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a11      	ldr	r2, [pc, #68]	@ (8000328 <PWM_Init+0xb0>)
 80002e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002e6:	6013      	str	r3, [r2, #0]
//TIM8->DIER |= TIM_DIER_UIE;
TIM8->DIER |= TIM_DIER_TIE;
 80002e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000328 <PWM_Init+0xb0>)
 80002ea:	68db      	ldr	r3, [r3, #12]
 80002ec:	4a0e      	ldr	r2, [pc, #56]	@ (8000328 <PWM_Init+0xb0>)
 80002ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002f2:	60d3      	str	r3, [r2, #12]
//PWM edge-aligned mode (00): the counter must be configured up-counting or down-counting.
//PWM center aligned mode: the counter mode must be center aligned counting mode (CMS bits different from '00').

TIM8->CCER |= TIM_CCER_CC1E;
 80002f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000328 <PWM_Init+0xb0>)
 80002f6:	6a1b      	ldr	r3, [r3, #32]
 80002f8:	4a0b      	ldr	r2, [pc, #44]	@ (8000328 <PWM_Init+0xb0>)
 80002fa:	f043 0301 	orr.w	r3, r3, #1
 80002fe:	6213      	str	r3, [r2, #32]
		//6. Enable the capture compare in CCER.
//7. Enable main output in BDTR and Enable the counter.
TIM8->BDTR |= TIM_BDTR_MOE;
 8000300:	4b09      	ldr	r3, [pc, #36]	@ (8000328 <PWM_Init+0xb0>)
 8000302:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000304:	4a08      	ldr	r2, [pc, #32]	@ (8000328 <PWM_Init+0xb0>)
 8000306:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800030a:	6453      	str	r3, [r2, #68]	@ 0x44
TIM8->CR1 |= TIM_CR1_CEN;
 800030c:	4b06      	ldr	r3, [pc, #24]	@ (8000328 <PWM_Init+0xb0>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a05      	ldr	r2, [pc, #20]	@ (8000328 <PWM_Init+0xb0>)
 8000312:	f043 0301 	orr.w	r3, r3, #1
 8000316:	6013      	str	r3, [r2, #0]
}
 8000318:	bf00      	nop
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr
 8000320:	40023800 	.word	0x40023800
 8000324:	40020800 	.word	0x40020800
 8000328:	40010400 	.word	0x40010400

0800032c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
  DWT_Init();
 8000330:	f000 f802 	bl	8000338 <DWT_Init>
}
 8000334:	bf00      	nop
 8000336:	bd80      	pop	{r7, pc}

08000338 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800033c:	4b14      	ldr	r3, [pc, #80]	@ (8000390 <DWT_Init+0x58>)
 800033e:	68db      	ldr	r3, [r3, #12]
 8000340:	4a13      	ldr	r2, [pc, #76]	@ (8000390 <DWT_Init+0x58>)
 8000342:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000346:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000348:	4b11      	ldr	r3, [pc, #68]	@ (8000390 <DWT_Init+0x58>)
 800034a:	68db      	ldr	r3, [r3, #12]
 800034c:	4a10      	ldr	r2, [pc, #64]	@ (8000390 <DWT_Init+0x58>)
 800034e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000352:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000354:	4b0f      	ldr	r3, [pc, #60]	@ (8000394 <DWT_Init+0x5c>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a0e      	ldr	r2, [pc, #56]	@ (8000394 <DWT_Init+0x5c>)
 800035a:	f023 0301 	bic.w	r3, r3, #1
 800035e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000360:	4b0c      	ldr	r3, [pc, #48]	@ (8000394 <DWT_Init+0x5c>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a0b      	ldr	r2, [pc, #44]	@ (8000394 <DWT_Init+0x5c>)
 8000366:	f043 0301 	orr.w	r3, r3, #1
 800036a:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800036c:	4b09      	ldr	r3, [pc, #36]	@ (8000394 <DWT_Init+0x5c>)
 800036e:	2200      	movs	r2, #0
 8000370:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000372:	bf00      	nop
    __ASM volatile ("NOP");
 8000374:	bf00      	nop
    __ASM volatile ("NOP");
 8000376:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000378:	4b06      	ldr	r3, [pc, #24]	@ (8000394 <DWT_Init+0x5c>)
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	2b00      	cmp	r3, #0
 800037e:	bf0c      	ite	eq
 8000380:	2301      	moveq	r3, #1
 8000382:	2300      	movne	r3, #0
 8000384:	b2db      	uxtb	r3, r3
}
 8000386:	4618      	mov	r0, r3
 8000388:	46bd      	mov	sp, r7
 800038a:	bc80      	pop	{r7}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	e000edf0 	.word	0xe000edf0
 8000394:	e0001000 	.word	0xe0001000

08000398 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000398:	480d      	ldr	r0, [pc, #52]	@ (80003d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800039a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800039c:	f7ff ffc6 	bl	800032c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003a0:	480c      	ldr	r0, [pc, #48]	@ (80003d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80003a2:	490d      	ldr	r1, [pc, #52]	@ (80003d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003a4:	4a0d      	ldr	r2, [pc, #52]	@ (80003dc <LoopForever+0xe>)
  movs r3, #0
 80003a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a8:	e002      	b.n	80003b0 <LoopCopyDataInit>

080003aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ae:	3304      	adds	r3, #4

080003b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003b4:	d3f9      	bcc.n	80003aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003b6:	4a0a      	ldr	r2, [pc, #40]	@ (80003e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003b8:	4c0a      	ldr	r4, [pc, #40]	@ (80003e4 <LoopForever+0x16>)
  movs r3, #0
 80003ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003bc:	e001      	b.n	80003c2 <LoopFillZerobss>

080003be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003c0:	3204      	adds	r2, #4

080003c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003c4:	d3fb      	bcc.n	80003be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003c6:	f000 f811 	bl	80003ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ca:	f7ff ff25 	bl	8000218 <main>

080003ce <LoopForever>:

LoopForever:
  b LoopForever
 80003ce:	e7fe      	b.n	80003ce <LoopForever>
  ldr   r0, =_estack
 80003d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003dc:	08000454 	.word	0x08000454
  ldr r2, =_sbss
 80003e0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003e4:	20000020 	.word	0x20000020

080003e8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003e8:	e7fe      	b.n	80003e8 <ADC_IRQHandler>
	...

080003ec <__libc_init_array>:
 80003ec:	b570      	push	{r4, r5, r6, lr}
 80003ee:	4d0d      	ldr	r5, [pc, #52]	@ (8000424 <__libc_init_array+0x38>)
 80003f0:	4c0d      	ldr	r4, [pc, #52]	@ (8000428 <__libc_init_array+0x3c>)
 80003f2:	1b64      	subs	r4, r4, r5
 80003f4:	10a4      	asrs	r4, r4, #2
 80003f6:	2600      	movs	r6, #0
 80003f8:	42a6      	cmp	r6, r4
 80003fa:	d109      	bne.n	8000410 <__libc_init_array+0x24>
 80003fc:	4d0b      	ldr	r5, [pc, #44]	@ (800042c <__libc_init_array+0x40>)
 80003fe:	4c0c      	ldr	r4, [pc, #48]	@ (8000430 <__libc_init_array+0x44>)
 8000400:	f000 f818 	bl	8000434 <_init>
 8000404:	1b64      	subs	r4, r4, r5
 8000406:	10a4      	asrs	r4, r4, #2
 8000408:	2600      	movs	r6, #0
 800040a:	42a6      	cmp	r6, r4
 800040c:	d105      	bne.n	800041a <__libc_init_array+0x2e>
 800040e:	bd70      	pop	{r4, r5, r6, pc}
 8000410:	f855 3b04 	ldr.w	r3, [r5], #4
 8000414:	4798      	blx	r3
 8000416:	3601      	adds	r6, #1
 8000418:	e7ee      	b.n	80003f8 <__libc_init_array+0xc>
 800041a:	f855 3b04 	ldr.w	r3, [r5], #4
 800041e:	4798      	blx	r3
 8000420:	3601      	adds	r6, #1
 8000422:	e7f2      	b.n	800040a <__libc_init_array+0x1e>
 8000424:	0800044c 	.word	0x0800044c
 8000428:	0800044c 	.word	0x0800044c
 800042c:	0800044c 	.word	0x0800044c
 8000430:	08000450 	.word	0x08000450

08000434 <_init>:
 8000434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000436:	bf00      	nop
 8000438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800043a:	bc08      	pop	{r3}
 800043c:	469e      	mov	lr, r3
 800043e:	4770      	bx	lr

08000440 <_fini>:
 8000440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000442:	bf00      	nop
 8000444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000446:	bc08      	pop	{r3}
 8000448:	469e      	mov	lr, r3
 800044a:	4770      	bx	lr
